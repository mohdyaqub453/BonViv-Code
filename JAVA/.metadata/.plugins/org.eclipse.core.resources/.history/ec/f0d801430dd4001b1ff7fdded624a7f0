import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.vocabulary.*;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.jena.query.*;
import org.apache.jena.sparql.core.DatasetImpl;
import org.apache.jena.sparql.engine.http.QueryEngineHTTP;
import org.apache.jena.tdb.TDBFactory;

public class database {

	public static void main(String[] args) {
		 
		
		/*
		
		String service = "http://localhost:3030/first";
		String query = "\r\n"
				+ "SELECT ?subject ?predicate ?object\r\n"
				+ "WHERE {\r\n"
				+ "  ?subject ?predicate ?object\r\n"
				+ "}\r\n"
				+ "LIMIT 25";
		try (QueryExecution qe = QueryExecutionFactory.sparqlService(service, query)) {
		    ResultSet rs = qe.execSelect();
		    ResultSetFormatter.outputAsTSV(rs);
		}
		
		
		model.read("https://fragments.dbpedia.org/2016-04/en");
		model.write(System.out,"TURTLE");
		/*HttpClientContext httpContext = new HttpClientContext();
		String querystring ="SELECT * WHERE { ?s ?p ?o } LIMIT 10";
		Query query = QueryFactory.create(querystring);
		QueryEngineHTTP qEngine = QueryExecutionFactory.createServiceRequest("http://fragments.dbpedia.org/2015/en", query);
		qEngine.setHttpContext(httpContext);
		
		
		try 
		{
			ResultSet result = qEngine.execSelect();
			ResultSetFormatter.out(result);
		}
		finally {
			qEngine.close();
		}*/
		  String directory = "MyDatabases/dataset" ;
		  Dataset dataset = TDBFactory.createDataset(directory) ;
		
		  dataset.begin(ReadWrite.READ) ;
		  // Get model inside the transaction
		  Model model = dataset.getDefaultModel() ;
		  model.write(System.out ,"TURTLE");
		  dataset.end() ;
		  
		  dataset.begin(ReadWrite.WRITE) ;
		  model = dataset.getDefaultModel() ;
		  Model model1 = ModelFactory.createDefaultModel();
		  model.read("example.jsonld") ;
		  model.add(model1);
		  
		  model.commit(); 
		  dataset.end() ;
		  
		  String querystring = "prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n"
					+ "prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n"
					+ "prefix owl: <http://www.w3.org/2002/07/owl#>\r\n"
					+ "prefix xsd: <http://www.w3.org/2001/XMLSchema#>\r\n"
					+ "prefix ab: <http://learningsparql.com/ns/addressbook#>\r\n"
					+ "prefix d:<http://learningsparql.com/ns/data#>\r\n"
					+ "SELECT ?Title ?Genre ?Author_Name ?Author_age\r\n"
					+ "WHERE {\r\n"
					+ "  \r\n"
					+ "		?subject  ab:Title ?Title;\r\n"
					+ "                  ab:Genre ?Genre;\r\n"
					+ "                  ab:authors ?author.\r\n"
					+ "         ?author ab:Author_Name ?Author_Name;\r\n"
					+ "                 ab:Age ?Author_age.\r\n"
					+ "                  \r\n"
					+ "r\n"
					+ "\r\n"
					+ "          \r\n"
					+ "}";
			
		  Query query = QueryFactory.create(querystring);
			QueryExecution qexec =QueryExecutionFactory.create(query, model);
			
			try 
			{
				ResultSet result =qexec.execSelect();
				while(result.hasNext()) {
					QuerySolution soln = result.nextSolution();
					RDFNode Title = soln.get("?Title");
					RDFNode author = soln.get("?Author_Name");
					System.out.println("Title "+ Title + "   Author "+ author);
				}
			}
			finally {
				qexec.close();
			}
		/*String szStoreName  = args[0];
		String szHostName   = args[1];
		String szHostPort   = args[2];
		int iBatchSize  = Integer.parseInt(args[3]);
		int iDOP = Integer.parseInt(args[4]);

		System.out.println("Create Oracle NoSQL connection");
		OracleNoSqlConnection conn 
		= OracleNoSqlConnection.createInstance(szStoreName,
		                                       szHostName, 
		                                       szHostPort);
		     
		System.out.println("Create Oracle NoSQL datasetgraph");
		OracleGraphNoSql graph = new OracleGraphNoSql(conn);
		DatasetGraphNoSql datasetGraph = DatasetGraphNoSql.createFrom(graph);
		   
		// Close graph, as it is no longer needed
		graph.close();
		    
		// Clear datasetgraph
		datasetGraph.clearRepository();
		    
		// Load data from file into the Oracle NoSQL Database
		DatasetGraphNoSql.load("example.nt", Lang.NQUADS, conn, 
		                        "http://example.org",
		                        iBatchSize, // batch size
		                        iDOP); // degree of parallelism
		    
		// Create dataset from Oracle NoSQL datasetgraph to execute
		Dataset ds = DatasetImpl.wrap(datasetGraph);
		   
		String szQuery = "select * where { graph ?g { ?s ?p ?o }  }";
		System.out.println("Execute query " + szQuery);
		    
		Query query = QueryFactory.create(szQuery);
		QueryExecution qexec = QueryExecutionFactory.create(query, ds);
		    
		try {
		      ResultSet results = qexec.execSelect();
		      ResultSetFormatter.out(System.out, results, query);
		    }
		    
		finally {
		      qexec.close();
		    }

		ds.close();
		conn.dispose();*/

	}

}
